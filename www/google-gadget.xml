<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Gator" />
   <UserPref 
    name="sheet" 
    display_name="Sheet" 
    required="true" />
    <UserPref 
     name="formkey" 
     display_name="Form key" 
     required="true" />
  <Content type="html">
    <![CDATA[
          <script type="text/javascript" src="http://gator.masc-proteomics.org/js/mascp-jstools.min.js"></script>
          <script type="text/javascript" charset="utf-8" src="http://code.jquery.com/jquery-1.4.1.min.js"></script>
          <script type="text/javascript" src="http://gator.masc-proteomics.org/js/jquery-ui-1.7.2.min.js"></script>
          <script type="text/javascript" src="http://gator.masc-proteomics.org/js/jquery-masonry-1.2.0.min.js"></script>
          <style type="text/css">
          #zoomin, #zoomout {
              font-weight: bolder;
              font-family: Helvetica;
              font-size: 11pt;
              cursor: pointer;
              position: absolute;
              right: 10px;
              background: white;
              border: solid #AAA 1px;
              box-shadow: 2px 3px 3px #AAA;
          }
          #zoomlabel {
              top: 2em;
              position: absolute;
              top: 2em;
              right: 0px;
              font-size: 12pt;
              font-weight: bolder;
              z-index: 1;
              text-shadow: #fff 0px 0px 4px;
          }
          #zoomin {
              top: 4em;
              z-index: 1;
              border-radius: 5px 5px 0px 0px;
          }

          #zoomout {
              top: 6em;
              z-index: 2;
              border-radius: 0px 0px 5px 5px;
          }
          </style>
      <h2 id="label"></h2>
      <p><h3>My name is: </h3><input id="user" type="text" value="Anonymous"/></p>
          <input type="button" value="Next" id="next" onclick="show_data(state+1);"/>
          <div style="position: relative; height: 2em;">
              <div id="zoomlabel">Zoom</div>
              <input id="zoomout" value="â€“" type="button"/><input id="zoomin" value="+" type="button"/>
          </div>
      <div>
          <div style="overflow: hidden; width: auto; height: 100%;">
              <div id="condensed_container" style="width: 100%"></div>
          </div>
      </div>
      <img src="" id="submitter"/>
          <script>
              window.svgns = 'http://www.w3.org/2000/svg';
              state = 2;
              var widget_rend = new MASCP.CondensedSequenceRenderer(document.getElementById('condensed_container'));
              var dragger = new GOMap.Diagram.Dragger();
              widget_rend.zoom = 0.81;
              widget_rend.padding = 10;

              jQuery('#zoomin').click(function() {
                  var start_zoom = widget_rend.zoom;
                  var curr_zoom = start_zoom;
                  var count = 0;
                  while (start_zoom === widget_rend.zoom && count < 5) {
                      curr_zoom += 0.5;
                      widget_rend.zoomCenter = 'center';
                      widget_rend.zoom = curr_zoom;
                      widget_rend.zoomCenter = null;
                      count++;
                  }
              });

              jQuery('#zoomout').click(function(e) {
                  var start_zoom = widget_rend.zoom;
                  var curr_zoom = start_zoom;
                  var count = 0;
                  while (start_zoom === widget_rend.zoom && count < 5) {
                      curr_zoom -= 0.5;
                      widget_rend.zoomCenter = 'center';
                      widget_rend.zoom = curr_zoom;
                      widget_rend.zoomCenter = null;
                      count++;
                  }
              });


              jQuery(widget_rend).bind('sequenceChange', function() {
                  var zoomFactor = 0.95 * window.innerWidth / (2 * widget_rend.sequence.length);
                  widget_rend.zoom = zoomFactor;
                  dragger.applyToElement(widget_rend._canvas);
                  GOMap.Diagram.addTouchZoomControls(widget_rend, widget_rend._canvas);
                  GOMap.Diagram.addScrollZoomControls(widget_rend, widget_rend._canvas);
                  widget_rend.navigation.hide();
              });

              widget_rend.setSequence('');
              widget_rend.grow_container = true;
              var data_points = [];

              var prefs = new gadgets.Prefs();
              var formkey = prefs.getString("formkey");

              function show_data(index) {
                if (data_points.length > 0) {
    document.getElementById('submitter').setAttribute('src','https://docs.google.com/a/glycocode.com/spreadsheet/formResponse?formkey='+formkey+'&entry.0.single='+ss_data[state][ss_data.titles["title_name"]]+'&entry.1.single='+data_points.join(',')+'&entry.2.single='+document.getElementById('user').value);
                }
                if (index < 2) {
                     state = 2;
                     index = 2;
                 }
                 if ( ! ss_data[index] ) {
                     state = 2;
                     index = 2;
                 }
                 data_points = [];
                 state = parseInt(index);
                 var dat = ss_data[index];
                 var titles = ss_data.titles;
                 var title = dat[titles["title_name"]];
                 document.getElementById('label').innerHTML = title;

                 var seq = dat[titles["sequence"]];
                 var window = dat[titles["track_window"]].replace(/\*/g,'');
                 var is_new_sequence = false;
                 if (seq != widget_rend.sequence) {
                     widget_rend.reset();
                     widget_rend._layer_containers = {};
                     is_new_sequence = true;
                 }
                 widget_rend.setSequence(seq);
                 widget_rend.navigation.hide();
                 widget_rend.navigation.show();
                 var window_pos = seq.indexOf(window)+1+parseInt(window.length/2);
                 for (var tit in titles) {
                    MASCP.registerLayer(tit, { 'fullname' : tit , 'color' : '#ff0000'} );

                    if (tit.match(/track/)) {
                        var box = widget_rend.getAminoAcidsByPeptide(
                          dat[titles[tit]].replace(/\*/g,'')
                        ).addToLayer(tit);
                        if ( ! box.ev ) {
                          var selected = false;
                          box.setAttribute('style','cursor: pointer;');
                          box.addEventListener('click',function() {
                            selected = ! selected;
                            this.setAttribute('fill',selected ? '#00ff00' : '#ff0000');
                            var start = (parseFloat(this.getAttribute('x'))+12.5)/50;
                            var width = parseFloat(this.getAttribute('width'))/50;
                            var idx = start+"-"+width;
                            if (selected) {
                              if (data_points.indexOf(idx) < 0) {
                                data_points.push(idx);
                              }
                            } else {
                              while( data_points.indexOf(idx) >= 0 ) {
                                data_points.splice(data_points.indexOf(idx),1);
                              }
                            }
                          });
                          box.ev = true;
                        }
                        if (widget_rend.trackOrder.indexOf(tit) < 0) {
                            widget_rend.trackOrder.push(tit);
                        }
                        widget_rend.showLayer(tit);
                    }
                    if (tit.match(/marker/) && parseFloat(dat[titles[tit]]) > 0) {
                        var icon = widget_rend.getAminoAcidsByPosition([window_pos])[0].
                        addToLayer(tit);
                        if (widget_rend.trackOrder.indexOf(tit) < 0) {
                            widget_rend.trackOrder.push(tit);
                        }
                        widget_rend.showLayer(tit);
                    }
                 }
                 widget_rend.refresh();
                 if (ss_data[parseInt(index)+1] &&
                     ss_data[parseInt(index)+1][titles["title_name"]] == title) {
                     show_data(parseInt(index)+1);
                 }
              };
          </script>

          <script>
          var parsedata = function ( data ){
             /* the content of this function is not important to the question */
             var entryidRC = /.*\/R(\d*)C(\d*)/;
             var retdata = {};
             retdata.mat = {};
             var max_rows = 0;
             for( var l in data.feed.entry )
             {
               var entry = data.feed.entry[ l ];
               var id = entry.id.$t;
               var m = entryidRC.exec( id );
               var R,C;
               if( m != null )
               {
                 R = new Number( m[ 1 ] );
                 C = new Number( m[ 2 ] );
               }
               var row = retdata.mat[ R ];                                                                                                                           
               if( typeof( row ) == 'undefined' )                                                                 retdata.mat[ R ] = {};
               retdata.mat[ R ][ C ] = entry.content.$t;
               if (R > max_rows) { 
                 max_rows = R;
               }
             }
             retdata.max_rows = max_rows;
             return retdata;                                                                       
          }
          function gotData(data) {
                var ret_data = parsedata(data);
                ss_data = ret_data.mat;
                var max = ret_data.max_rows;
                var titles = {};
                for (var idx in ss_data[1]) {
                    titles[ss_data[1][idx]]=idx;
                }
                ss_data.titles = titles;
                show_data(state);
             }

             var prefs = new gadgets.Prefs();
             var sheet = prefs.getString("sheet");
             var data_url="http://spreadsheets.google.com/feeds/cells/"+sheet+"/1/public/basic?alt=json-in-script&callback=gotData";
             var head= document.getElementsByTagName('head')[0];
             var script= document.createElement('script');
             script.type= 'text/javascript';
             script.src= data_url;
             head.appendChild(script);
          </script>
    ]]>
  </Content>
</Module>